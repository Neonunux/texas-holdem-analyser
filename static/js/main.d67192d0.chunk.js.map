{"version":3,"sources":["poker/Card.ts","poker/pokerHand.ts","views/PokerHandDetector.tsx","views/Application.tsx","index.tsx"],"names":["CardRank","CardColor","cardNumericalRanks","Map","n2","n3","n4","n5","n6","n7","n8","n9","T","J","Q","K","A","Card","rank","color","this","get","cards","map","card","toString","join","cardCode","length","Error","split","Object","values","includes","multipleCardsCode","match","fromString","findHighestFlush","cardsSortedByRank","sortBy","cardsByColor","groupBy","sets","cardCount","Math","max","range","reduce","highestRankSets","currentIndex","highestRankAtCurrentIndex","set","numericalRank","filter","highestRankSet","getHighestRankSet","flatMap","colorCards","slice","findHighestStraight","cardsWithUniqueRanks","uniqBy","highestSequence","reverse","currentSequence","currentCard","previousCard","last","highestSequenceWithStartingA","straightLength","PokerHandDetector","useState","holeCardsCode","setHoleCardsCode","communityCardsCode","setCommunityCardsCode","hasStraight","setHasStraight","hasFlush","setHasFlush","hasStraightFlush","setHasStraightFlush","type","value","onChange","event","target","onClick","allCardsCode","allCards","fromStringMultiple","straightFlushes","straightFlush","maxBy","findHighestStraightFlush","Application","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d67192d0.chunk.js","sourcesContent":["export enum CardRank {\n  n2 = '2',\n  n3 = '3',\n  n4 = '4',\n  n5 = '5',\n  n6 = '6',\n  n7 = '7',\n  n8 = '8',\n  n9 = '9',\n  T = 'T',\n  J = 'J',\n  Q = 'Q',\n  K = 'K',\n  A = 'A',\n}\n\nexport enum CardColor {\n  Clubs = 'c',\n  Diamonds = 'd',\n  Hearts = 'h',\n  Spades = 's',\n}\n\nconst cardNumericalRanks = new Map([\n  [CardRank.n2, 2],\n  [CardRank.n3, 3],\n  [CardRank.n4, 4],\n  [CardRank.n5, 5],\n  [CardRank.n6, 6],\n  [CardRank.n7, 7],\n  [CardRank.n8, 8],\n  [CardRank.n9, 9],\n  [CardRank.T, 10],\n  [CardRank.J, 11],\n  [CardRank.Q, 12],\n  [CardRank.K, 13],\n  [CardRank.A, 14],\n]);\n\nexport class Card {\n  public readonly rank: CardRank;\n\n  public readonly color: CardColor;\n\n  constructor(rank: CardRank, color: CardColor) {\n    this.rank = rank;\n    this.color = color;\n  }\n\n  get numericalRank() {\n    return cardNumericalRanks.get(this.rank)!;\n  }\n\n  toString() {\n    return `${this.rank}${this.color}`;\n  }\n\n  static toStringMultiple(cards: Card[]) {\n    return cards\n      .map((card) => card.toString())\n      .join();\n  }\n\n  static fromString(cardCode: string) {\n    if (cardCode.length !== 2) {\n      throw Error(`Invalid length \\`${cardCode.length}\\` of card code '${cardCode}'.`);\n    }\n\n    const [rank, color] = cardCode.split('');\n\n    if (!(Object.values(CardRank) as string[]).includes(rank)) {\n      throw Error(`Invalid rank '${rank}' from card code '${cardCode}'.`);\n    }\n\n    if (!(Object.values(CardColor) as string[]).includes(color)) {\n      throw Error(`Invalid color '${color}' from card code '${cardCode}'.`);\n    }\n\n    return new Card(rank as CardRank, color as CardColor);\n  }\n\n  static fromStringMultiple(multipleCardsCode: String) {\n    const cardCodes = multipleCardsCode.match(/.{1,2}/g) ?? [];\n\n    return cardCodes.map(this.fromString);\n  }\n}\n","import {\n  last, groupBy, map, maxBy, range, sortBy, uniqBy,\n} from 'lodash';\n\nimport { Card, CardRank } from './Card';\n\nconst straightLength = 5;\nconst flushLength = 5;\n\nexport function getHighestRankSet(sets: Card[][]) {\n  const cardCount = Math.max(0, ...map(sets, 'length'));\n  const cardIndexes = range(cardCount);\n\n  const [highestRankSet] = cardIndexes.reduce((highestRankSets, currentIndex) => {\n    if (highestRankSets.length === 1) {\n      return highestRankSets;\n    }\n    const highestRankAtCurrentIndex = Math.max(\n      ...highestRankSets.map((set) => set[currentIndex]?.numericalRank ?? -Infinity),\n    );\n    return highestRankSets.filter((set) => (\n      set[currentIndex]?.numericalRank === highestRankAtCurrentIndex\n    ));\n  }, sets);\n\n  return highestRankSet ?? null;\n}\n\nexport function findHighestFlush(cards: Card[]) {\n  const cardsSortedByRank = sortBy(cards, 'numericalRank');\n  const cardsByColor = groupBy(cardsSortedByRank, 'color');\n\n  const flushes = Object.values(cardsByColor)\n    .flatMap((colorCards) => (\n      colorCards.length >= flushLength\n        ? [colorCards.slice(-flushLength)]\n        : []\n    ));\n\n  const highestFlush = getHighestRankSet(flushes);\n\n  return highestFlush;\n}\n\nexport function findHighestStraightFlush(cards: Card[]) {\n  const cardsByColor = groupBy(cards, 'color');\n\n  const straightFlushes = Object.values(cardsByColor)\n    .flatMap((colorCards) => {\n      const straightFlush = findHighestStraight(colorCards);\n      return straightFlush ? [straightFlush] : [];\n    });\n\n  const highestStraightFlush = straightFlushes.length >= 1\n    ? maxBy(straightFlushes, (straightFlush) => last(straightFlush)!.numericalRank)!\n    : null;\n\n  return highestStraightFlush;\n}\n\nexport function findHighestStraight(cards: Card[]) {\n  const cardsSortedByRank = sortBy(cards, 'numericalRank');\n  const cardsWithUniqueRanks = uniqBy(cardsSortedByRank, 'rank');\n\n  const highestSequence = cardsWithUniqueRanks\n    .slice()\n    .reverse()\n    .reduce((currentSequence, currentCard) => {\n      if (currentSequence.length === straightLength) {\n        return currentSequence;\n      }\n      const previousCard = last(currentSequence);\n      if (!previousCard || currentCard.numericalRank === previousCard.numericalRank - 1) {\n        return [...currentSequence, currentCard];\n      }\n      return [currentCard];\n    }, [] as Card[])\n    .reverse();\n\n  const highestSequenceWithStartingA = (\n    highestSequence.length === (straightLength - 1)\n    && highestSequence[0].rank === CardRank.n2\n    && last(cardsWithUniqueRanks)?.rank === CardRank.A\n  ) ? [last(cardsWithUniqueRanks)!, ...highestSequence]\n    : highestSequence;\n\n  const highestStraight = highestSequenceWithStartingA.length === straightLength\n    ? highestSequenceWithStartingA\n    : null;\n\n  return highestStraight;\n}\n","import React, { useState } from 'react';\n\nimport { Card } from '../poker/Card';\nimport {\n  findHighestFlush,\n  findHighestStraight,\n  findHighestStraightFlush,\n} from '../poker/pokerHand';\n\n// As2cKsQh3c5c4c\n// AdKdJdQd\n\nexport function PokerHandDetector() {\n  const [holeCardsCode, setHoleCardsCode] = useState('');\n  const [communityCardsCode, setCommunityCardsCode] = useState('');\n  const [hasStraight, setHasStraight] = useState(false);\n  const [hasFlush, setHasFlush] = useState(false);\n  const [hasStraightFlush, setHasStraightFlush] = useState(false);\n\n  const processDetection = () => {\n    const allCardsCode = `${holeCardsCode}${communityCardsCode}`;\n    const allCards = Card.fromStringMultiple(allCardsCode);\n\n    setHasStraight(!!findHighestStraight(allCards));\n    setHasFlush(!!findHighestFlush(allCards));\n    setHasStraightFlush(!!findHighestStraightFlush(allCards));\n  };\n\n  return (\n    <>\n      <label>\n        main&nbsp;\n        <input\n          type=\"text\"\n          value={holeCardsCode}\n          onChange={(event) => setHoleCardsCode(event.target.value)}\n        />\n      </label>\n      <label>\n        table&nbsp;\n        <input\n          type=\"text\"\n          value={communityCardsCode}\n          onChange={(event) => setCommunityCardsCode(event.target.value)}\n        />\n      </label>\n      <button\n        type=\"button\"\n        onClick={processDetection}\n      >\n        détecter la meilleure main\n      </button>\n      <div>\n        suite :&nbsp;\n        { hasStraight ? 'oui' : 'non' }\n      </div>\n      <div>\n        couleur :&nbsp;\n        { hasFlush ? 'oui' : 'non' }\n      </div>\n      <div>\n        quinte flush :&nbsp;\n        { hasStraightFlush ? 'oui' : 'non' }\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { PokerHandDetector } from './PokerHandDetector';\n\nimport './index.css';\n\nexport function Application() {\n  return (\n    <>\n      <PokerHandDetector />\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Application } from './views/Application';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Application />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}